#!/bin/sh
set -e

echo "Starting SSC initialization in {{ ssc_mode }} mode..."

if [ ! -f /root/.ssc/config/config.toml ]; then
  echo "Initializing SSC configuration..."
  sscd init ssc-validator --home /root/.ssc --chain-id {{ ssc.chain_id }} --default-denom {{ ssc.denom }}
fi

{% if ssc_mode == 'validator' %}
# Validator mode: Create local genesis with validator
# Check if genesis has validators (not just if file exists)
if [ ! -f /root/.ssc/config/genesis.json ] || grep -q '"validators": \[\]' /root/.ssc/config/genesis.json; then
  echo "Setting up validator mode..."
  
  echo "Adding validator account from mnemonic..."
  echo "$VALIDATOR_MNEMONIC" | sscd keys add ssc-validator --home /root/.ssc --keyring-backend test --recover --no-backup
  
  echo "Adding genesis account..."
  sscd add-genesis-account ssc-validator 1000000000000{{ ssc.denom }} --home /root/.ssc --keyring-backend test
  
  echo "Creating gentx..."
  sscd genesis gentx ssc-validator 1000000000{{ ssc.denom }} --home /root/.ssc --keyring-backend test --chain-id {{ ssc.chain_id }}
  
  echo "Collecting gentxs..."
  sscd genesis collect-gentxs --home /root/.ssc
  
  echo "Validator initialization complete"
else
  echo "Validator already initialized"
fi
{% else %}
# Fullnode mode: Download genesis from URL or use existing
if [ ! -f /root/.ssc/config/genesis.json ]; then
  {% if ssc.genesis_url is defined and ssc.genesis_url != "" %}
  echo "Downloading genesis file from {{ ssc.genesis_url }}..."
  curl -f "{{ ssc.genesis_url }}" --output /root/.ssc/config/genesis.json || {
    echo "Failed to download genesis file, creating empty genesis"
    sscd init ssc-validator --home /root/.ssc --chain-id {{ ssc.chain_id }} --default-denom {{ ssc.denom }}
  }
  {% else %}
  echo "No genesis URL provided, using default initialization"
  {% endif %}
else
  echo "Genesis file already exists"
fi
{% endif %}

echo "SSC initialization complete"
